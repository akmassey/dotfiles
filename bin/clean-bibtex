#! /usr/bin/env ruby

# Copyright (c) 2013-2014 Aaron Massey

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

require 'optparse'
require 'bibtex'
require 'fileutils'
require 'titlecase'

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = "clean-bibtex: prunes a bibtex file of bad entries"
  opts.define_head "Usage: clean-bibtex [options] <bibtex file>"
  opts.separator ""
  opts.separator "Examples:"
  opts.separator "  clean-bibtex awesome.bib"
  opts.separator "  clean-bibtex --check awesome.bib"
  opts.separator ""

  opts.on("-v","--verbose") do
    options[:verbose] = true
  end

  opts.on("-o [FILE]","--output [FILE]", "Filename for cleaned output") do |dir|
    options[:output] = dir
  end

  opts.on("-c", "--check", "Check a bibtex file, but don't correct it") do
    options[:check] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

option_parser.parse!

if options[:output]
  if File.exists?(options[:output]) and not options[:force]
    raise ArgumentError,"Ouput file (#{options[:output]}) must not exist.  We don't want to overwrite anything!"
  end

  @output = options[:output]
else
  @output = File.join(Dir.pwd, "output.bib")
end

def verbose_puts(string)
  if options[:verbose]
    puts string
  end
end

@input = BibTeX.open(ARGV.shift)

# Currently a "bad" entry is one that doesn't have an author, year, or title
def check_entry(entry)
  return unless entry.methods.include?("title".to_sym)
  if entry.title == "" or entry.title.nil? or
    entry.year == "" or entry.year.nil? or
    entry.author == "" or entry.author.nil?
    puts "\nBad entry:\n#{entry}"
    @input.delete(entry)
  end
end

# Standardize capitalization for most fields
def clean_entry(entry)
  fields_to_check = [ :author, :title, :journal, :publisher, :booktitle,
                      :month, :institution ]

  return unless entry.methods.include?("fields".to_sym)
  entry.fields.each do |f, value|
    #puts "Checking field #{f} for entry #{entry}"
    next unless fields_to_check.include?(f) or !(entry[f].nil?)
    entry[f] = standardize_capitialization(entry[f])
  end
end

def standardize_capitialization(string)
  string = string.to_s.gsub(/[\{\}]/,"")
  string = string.downcase.titlecase
  string.insert(0, "{").insert(-1,"}")
  string = string.gsub("Ieee", "IEEE")
  string = string.gsub("Acm", "ACM")
  string = string.gsub("Re ", "RE ")
  string = string.gsub("Icse", "ICSE")
  string = string.gsub("Mcgraw", "McGraw")
  string = string.gsub("Man-month", "Man-Month")
  if string.match(/\\url/)
    string = string.gsub(/\\url/, "\\url{")
    string = string.insert(-1, "}")
  end
  string
end

@input.each do |e|
  check_entry(e)
  clean_entry(e)
end

unless options[:check]
  @input.save
end
